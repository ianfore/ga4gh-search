openapi: 3.0.2
info:
  title: GA4GH Search API
  version: 0.2.0
  description: >
    GA4GH Search is an API for searching biomedical data.


    More information on:


    - [GitHub Pages](../)


    - [Full Discovery Search Specification](../SEARCHSPEC.html)


    ---


    # Overview


    The primary container for data in the Search API is the **Table**. Tables

    contain rows of data, where each row is a JSON object with key/value pairs.

    The table describes the structure of its row objects using [JSON

    Schema](https://json-schema.org/). Row attributes can take on any legal JSON

    value, eg. numbers, strings, booleans, nulls, arrays, and nested JSON

    objects.


    The API supports browsing and discovery of data models and table metadata,

    listing table data, and optionally querying table data using arbitrarily

    complex expressions including joins and aggregations. The query language is

    SQL with domain specific functions to facilitate informative typing of the

    result fields. 


    More information on
    [GitHub](https://github.com/ga4gh-discovery/ga4gh-search).
  license:
    name: Apache 2.0
    url: >-
      https://raw.githubusercontent.com/ga4gh-discovery/ga4gh-search/develop/LICENSE
  contact:
    name: GA4GH Search Team
    email: ga4gh-discovery-search@ga4gh.org
security:
  - bearerAuth: []
paths:
  /tables:
    get:
      summary: List Tables
      description: Returns a list of Tables.
      operationId: listTables
      tags:
        - tables
      responses:
        '200':
          description: A list of Tables
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTablesResponse'
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/table/{table_name}/info':
    get:
      summary: Get a Table
      description: Returns the information about the Table identified by name.
      operationId: getTable
      tags:
        - tables
      parameters:
        - name: table_name
          in: path
          description: 'Unique Table name, unique to this implementation'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A Table
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
        '404':
          description: The table doesn't exist
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/table/{table_name}/data':
    get:
      summary: Fetch data from a Table
      description: Optional operation that returns data from a Table.
      operationId: getData
      tags:
        - tables
      parameters:
        - name: table_name
          in: path
          description: 'Unique Table name, unique to this implementation'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Data from the Table
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableData'
        '404':
          description: The table doesn't exist
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /search:
    post:
      summary: Perform a search on Tables
      description: Optional operation that accepts a SearchRequest and returns a TableData
      operationId: search
      requestBody:
        description: Query to execute
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      tags:
        - search
      responses:
        '200':
          description: Query results returned as TableData
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableData'
        '400':
          description: The query is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: The search operation is not implemented by this server
        '500':
          description: An unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /service-info:
    get:
      summary: Show information about the Search service
      operationId: getServiceInfo
      tags:
        - service-info
      responses:
        '200':
          description: >
            Show information about this Search service.


            Use `"type": {"group": "org.ga4gh", "artifact": "search", "version":
            "0.1.0"}` when implementing this specification directly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemas-Service'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    ListTablesResponse:
      required:
        - tables
      type: object
      properties:
        tables:
          type: array
          items:
            $ref: '#/components/schemas/Table'
        pagination:
          $ref: '#/components/schemas/Pagination'
        errors:
          $ref: '#/components/schemas/ErrorList'
    Table:
      required:
        - name
        - data_model
      type: object
      properties:
        name:
          type: string
          description: Table name
        description:
          type: string
          description: Optional description of the Table
        data_model:
          $ref: '#/components/schemas/schema#'
        errors:
          $ref: '#/components/schemas/ErrorList'
      description: |
        Describes a Table hosted by this search node.
    TableData:
      required:
        - data_model
        - data
      type: object
      properties:
        data_model:
          $ref: '#/components/schemas/schema#'
        data:
          type: array
          description: >-
            Page of JSON values. Each JSON item in the page must adhere to the
            schema provided in data_model.
          items:
            type: object
        pagination:
          $ref: '#/components/schemas/Pagination'
        errors:
          $ref: '#/components/schemas/ErrorList'
      description: A paginated collection of tabular data
    ErrorResponse:
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/ErrorList'
      description: The response body when no part of the request can be fulfilled
    ErrorList:
      type: array
      description: List of errors encountered
      items:
        $ref: '#/components/schemas/Error'
    Error:
      type: object
      properties:
        source:
          type: string
          description: >
            The "source" field should only be present when the error originated
            in an attached data source backing the Search API. The value of
            source can be any of the following:

            1. A fully qualified table `name` 2. Any prefix of a table `name`
            that ends before a `.` character in the name. For example if there
            is a table called `foo.bar.baz`, valid prefixes would be `foo` and
            `foo.bar`. Partial prefixes which do not end just before a `.`, are
            not valid. For example: `foo.b` and `fo` are not allowed.

            If the error originated inside the Search API implementation and is
            not associated with any particular table or group of tables, then
            the source must be absent. An example of this would be an error
            occurring from a bug in the implementation. Additionally, if the
            error is due to a bad request from the client, the source must also
            be absent.
        title:
          type: string
          description: >
            A short, human-readable description of the error.

            The value should not change from occurrence to occurrence of an
            error, except for purposes of localization.
          example: Internal server error
        detail:
          type: string
          description: >-
            A human-readable explanation specific to this occurrence of the
            error.
          example: Internal server error
      required:
        - title
    Pagination:
      type: object
      properties:
        next_page_url:
          type: string
          description: >-
            URL pointing to the next page of the same Table. Null or absent on
            last page.
          format: uri
    SearchRequest:
      description: >-
        Request body containing an SQL query with zero or more positional
        parameters.
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: >-
            Query in SQL. Supported SQL grammar, data types, and functions are
            described in [the
            specification](https://github.com/ga4gh-discovery/ga4gh-search/blob/develop/SEARCHSPEC.md#query).
          example: >-
            SELECT some_string, some_num FROM a_table WHERE some_string=? AND
            some_num=?
        parameters:
          type: array
          items: {}
          description: Positional parameters for the query in `query` property.
          example:
            - hello
            - 42
    Service:
      $ref: '#/components/schemas/schemas-Service'
    schema#: |
      {
          "$schema": "http://json-schema.org/draft-07/schema#",
          "$id": "http://json-schema.org/draft-07/schema#",
          "title": "Core schema meta-schema",
          "definitions": {
              "schemaArray": {
                  "type": "array",
                  "minItems": 1,
                  "items": { "$ref": "#" }
              },
              "nonNegativeInteger": {
                  "type": "integer",
                  "minimum": 0
              },
              "nonNegativeIntegerDefault0": {
                  "allOf": [
                      { "$ref": "#/definitions/nonNegativeInteger" },
                      { "default": 0 }
                  ]
              },
              "simpleTypes": {
                  "enum": [
                      "array",
                      "boolean",
                      "integer",
                      "null",
                      "number",
                      "object",
                      "string"
                  ]
              },
              "stringArray": {
                  "type": "array",
                  "items": { "type": "string" },
                  "uniqueItems": true,
                  "default": []
              }
          },
          "type": ["object", "boolean"],
          "properties": {
              "$id": {
                  "type": "string",
                  "format": "uri-reference"
              },
              "$schema": {
                  "type": "string",
                  "format": "uri"
              },
              "$ref": {
                  "type": "string",
                  "format": "uri-reference"
              },
              "$comment": {
                  "type": "string"
              },
              "title": {
                  "type": "string"
              },
              "description": {
                  "type": "string"
              },
              "default": true,
              "readOnly": {
                  "type": "boolean",
                  "default": false
              },
              "writeOnly": {
                  "type": "boolean",
                  "default": false
              },
              "examples": {
                  "type": "array",
                  "items": true
              },
              "multipleOf": {
                  "type": "number",
                  "exclusiveMinimum": 0
              },
              "maximum": {
                  "type": "number"
              },
              "exclusiveMaximum": {
                  "type": "number"
              },
              "minimum": {
                  "type": "number"
              },
              "exclusiveMinimum": {
                  "type": "number"
              },
              "maxLength": { "$ref": "#/definitions/nonNegativeInteger" },
              "minLength": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },
              "pattern": {
                  "type": "string",
                  "format": "regex"
              },
              "additionalItems": { "$ref": "#" },
              "items": {
                  "anyOf": [
                      { "$ref": "#" },
                      { "$ref": "#/definitions/schemaArray" }
                  ],
                  "default": true
              },
              "maxItems": { "$ref": "#/definitions/nonNegativeInteger" },
              "minItems": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },
              "uniqueItems": {
                  "type": "boolean",
                  "default": false
              },
              "contains": { "$ref": "#" },
              "maxProperties": { "$ref": "#/definitions/nonNegativeInteger" },
              "minProperties": { "$ref": "#/definitions/nonNegativeIntegerDefault0" },
              "required": { "$ref": "#/definitions/stringArray" },
              "additionalProperties": { "$ref": "#" },
              "definitions": {
                  "type": "object",
                  "additionalProperties": { "$ref": "#" },
                  "default": {}
              },
              "properties": {
                  "type": "object",
                  "additionalProperties": { "$ref": "#" },
                  "default": {}
              },
              "patternProperties": {
                  "type": "object",
                  "additionalProperties": { "$ref": "#" },
                  "propertyNames": { "format": "regex" },
                  "default": {}
              },
              "dependencies": {
                  "type": "object",
                  "additionalProperties": {
                      "anyOf": [
                          { "$ref": "#" },
                          { "$ref": "#/definitions/stringArray" }
                      ]
                  }
              },
              "propertyNames": { "$ref": "#" },
              "const": true,
              "enum": {
                  "type": "array",
                  "items": true,
                  "minItems": 1,
                  "uniqueItems": true
              },
              "type": {
                  "anyOf": [
                      { "$ref": "#/definitions/simpleTypes" },
                      {
                          "type": "array",
                          "items": { "$ref": "#/definitions/simpleTypes" },
                          "minItems": 1,
                          "uniqueItems": true
                      }
                  ]
              },
              "format": { "type": "string" },
              "contentMediaType": { "type": "string" },
              "contentEncoding": { "type": "string" },
              "if": { "$ref": "#" },
              "then": { "$ref": "#" },
              "else": { "$ref": "#" },
              "allOf": { "$ref": "#/definitions/schemaArray" },
              "anyOf": { "$ref": "#/definitions/schemaArray" },
              "oneOf": { "$ref": "#/definitions/schemaArray" },
              "not": { "$ref": "#" }
          },
          "default": true
      }
    ServiceType:
      description: Type of a GA4GH service
      type: object
      required:
        - group
        - artifact
        - version
      properties:
        group:
          type: string
          description: >-
            Namespace in reverse domain name format. Use `org.ga4gh` for
            implementations compliant with official GA4GH specifications. For
            services with custom APIs not standardized by GA4GH, or
            implementations diverging from official GA4GH specifications, use a
            different namespace (e.g. your organization's reverse domain name).
          example: org.ga4gh
        artifact:
          type: string
          description: >-
            Name of the API or GA4GH specification implemented. Official GA4GH
            types should be assigned as part of standards approval process.
            Custom artifacts are supported.
          example: beacon
        version:
          type: string
          description: >-
            Version of the API or specification. GA4GH specifications use
            semantic versioning.
          example: 1.0.0
    schemas-Service:
      description: GA4GH service
      type: object
      required:
        - id
        - name
        - type
        - organization
        - version
      properties:
        id:
          type: string
          description: >-
            Unique ID of this service. Reverse domain name notation is
            recommended, though not required. The identifier should attempt to
            be globally unique so it can be used in downstream aggregator
            services e.g. Service Registry.
          example: org.ga4gh.myservice
        name:
          type: string
          description: Name of this service. Should be human readable.
          example: My project
        type:
          $ref: '#/components/schemas/ServiceType'
        description:
          type: string
          description: >-
            Description of the service. Should be human readable and provide
            information about the service.
          example: This service provides...
        organization:
          type: object
          description: Organization providing the service
          required:
            - name
            - url
          properties:
            name:
              type: string
              description: Name of the organization responsible for the service
              example: My organization
            url:
              type: string
              format: uri
              description: URL of the website of the organization (RFC 3986 format)
              example: 'https://example.com'
        contactUrl:
          type: string
          format: uri
          description: >-
            URL of the contact for the provider of this service, e.g. a link to
            a contact form (RFC 3986 format), or an email (RFC 2368 format).
          example: 'mailto:support@example.com'
        documentationUrl:
          type: string
          format: uri
          description: >-
            URL of the documentation of this service (RFC 3986 format). This
            should help someone learn how to use your service, including any
            specifics required to access data, e.g. authentication.
          example: 'https://docs.myservice.example.com'
        createdAt:
          type: string
          format: date-time
          description: >-
            Timestamp describing when the service was first deployed and
            available (RFC 3339 format)
          example: '2019-06-04T12:58:19Z'
        updatedAt:
          type: string
          format: date-time
          description: >-
            Timestamp describing when the service was last updated (RFC 3339
            format)
          example: '2019-06-04T12:58:19Z'
        environment:
          type: string
          description: >-
            Environment the service is running in. Use this to distinguish
            between production, development and testing/staging deployments.
            Suggested values are prod, test, dev, staging. However this is
            advised and not enforced.
          example: test
        version:
          type: string
          description: >-
            Version of the service being described. Semantic versioning is
            recommended, but other identifiers, such as dates or commit hashes,
            are also allowed. The version should be changed whenever the service
            is updated.
          example: 1.0.0
